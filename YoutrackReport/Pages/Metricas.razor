

@page "/Metricas"
@using Newtonsoft.Json
@using YoutrackReport.DTOs
@using YoutrackReport.Servicios.Contrato


@inject IObtieneMetricas ObtieneMetricasService


<!-- INICIO HTML -->
<h2>Métricas</h2>

@if (metricas != null) {
    
    <p><br /></p>
    <p>Total de proyectos: <b>@totalProyectos</b></p>
    <p>Total de cantidad En curso: <b>@resultado.enCurso</b></p>
    <p>Total de cantidad Terminado: <b>@resultado.terminado</b></p>

} else {
    <div style="width:350px;position:relative;margin:0 auto;">
        <p><img src="loading.gif" width="165" height="165" /></p>
        <p>Calculando información</p>
    </div>

}

<!-- FIN HTML -->


@code {
    private List<MetricasDTO> metricas;
    public int totalProyectos = 0;
    dynamic resultado = null;

    protected override async Task OnInitializedAsync()
    {

        try
        {
            metricas = await ObtieneMetricasService.ObtieneMetricasV();

            if (metricas != null)
            {
                totalProyectos = metricas.Count;

                //se recorre por el yield return
                //como redeclaré el método CalcularTotales como IAsyncEnumerable, esa fue la solución que encontré
                await foreach (var jsonResultado in ObtieneMetricasService.CalcularTotales())
                {
                    resultado = JsonConvert.DeserializeObject<ResultadoJson>(jsonResultado);
                }

            }

        }
        catch (Exception ex)
        {
            // Manejar la excepción según tus necesidades (por ejemplo, mostrar un mensaje de error)
            Console.WriteLine($"Error al obtener métricas: {ex.Message}");
        }
    }


    //Clase que contiene los valores que retorna el método CalcularTotales()
    public class ResultadoJson
    {
        public int enCurso { get; set; }
        public int terminado { get; set; }
    }


}


